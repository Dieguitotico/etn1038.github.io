{"version":3,"sources":["server.js"],"names":["express","require","MongoClient","ServerApiVersion","cors","app","use","json","uri","client","serverApi","version","v1","strict","deprecationErrors","get","req","res","connect","db","admin","listDatabases","databasesList","databases","status","error","message","params","dbName","listCollections","toArray","collections","collection","collectionName","query","day","month","year","filter","selectedDate","gestion","parseInt","mes","dia","console","log","find","$or","$lte","$lt","sort","limit","previousRecords","documents","PORT","process","env","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst { MongoClient, ServerApiVersion } = require('mongodb');\r\nconst cors = require('cors');\r\nconst app = express();\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(express.static('public'));\r\n\r\nconst uri = \"mongodb+srv://dticona1038:t1c0m4n09@cluster0.mh56n.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\";\r\nconst client = new MongoClient(uri, {\r\n  serverApi: {\r\n    version: ServerApiVersion.v1,\r\n    strict: true,\r\n    deprecationErrors: true,\r\n  }\r\n});\r\n\r\napp.get('/api/databases', async (req, res) => {\r\n  try {\r\n    await client.connect();\r\n    const databasesList = await client.db().admin().listDatabases();\r\n    res.json(databasesList.databases);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\napp.get('/api/collections/:dbName', async (req, res) => {\r\n  try {\r\n    await client.connect();\r\n    const db = client.db(req.params.dbName);\r\n    const collections = await db.listCollections().toArray();\r\n    res.json(collections);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\napp.get('/api/data/:dbName/:collectionName', async (req, res) => {\r\n  try {\r\n    await client.connect();\r\n    const db = client.db(req.params.dbName);\r\n    const collection = db.collection(req.params.collectionName);\r\n    \r\n    const { day, month, year } = req.query;\r\n    let filter = {};\r\n    let selectedDate = null;\r\n\r\n    if (year && month && day) {\r\n      selectedDate = {\r\n        gestion: parseInt(year),\r\n        mes: parseInt(month),\r\n        dia: parseInt(day)\r\n      };\r\n      filter = selectedDate;\r\n    } else {\r\n      if (year) filter.gestion = parseInt(year);\r\n      if (month) filter.mes = parseInt(month);\r\n      if (day) filter.dia = parseInt(day);\r\n    }\r\n\r\n    console.log('Filtro aplicado:', filter);\r\n\r\n    let documents;\r\n    if (selectedDate) {\r\n      const previousRecords = await collection.find({\r\n        $or: [\r\n          {\r\n            gestion: selectedDate.gestion,\r\n            mes: selectedDate.mes,\r\n            dia: { $lte: selectedDate.dia }\r\n          },\r\n          {\r\n            gestion: selectedDate.gestion,\r\n            mes: { $lt: selectedDate.mes }\r\n          },\r\n          {\r\n            gestion: { $lt: selectedDate.gestion }\r\n          }\r\n        ]\r\n      })\r\n      .sort({ gestion: -1, mes: -1, dia: -1 })\r\n      .limit(10)\r\n      .toArray();\r\n\r\n      documents = previousRecords;\r\n    } else {\r\n      documents = await collection.find(filter)\r\n        .sort({ gestion: -1, mes: -1, dia: -1 })\r\n        .limit(10)\r\n        .toArray();\r\n    }\r\n\r\n    res.json(documents);\r\n  } catch (error) {\r\n    console.error('Error en la consulta:', error);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}`);\r\n});"],"file":"server.dev.js"}