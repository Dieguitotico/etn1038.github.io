{"version":3,"sources":["grafica.js"],"names":["currentChart","getChartDataFromTable","headers","Array","from","document","querySelectorAll","map","th","textContent","trim","toLowerCase","console","log","diaIndex","findIndex","h","includes","datoFPFIndex","Error","join","rows","data","row","index","cells","diaValue","fpfValue","dia","parseInt","datoFPF","parseFloat","isNaN","warn","fpf","filter","item","length","sort","a","b","labels","datasets","label","borderColor","backgroundColor","tension","fill","pointRadius","pointHoverRadius","error","createOrUpdateChart","chartContainer","getElementById","ctx","getContext","destroy","chartData","Chart","type","options","responsive","maintainAspectRatio","plugins","title","display","text","font","size","legend","position","tooltip","mode","intersect","callbacks","context","parsed","y","toFixed","scales","beginAtZero","x","ticks","maxRotation","minRotation","style","showError","message","errorElement","clearError"],"mappings":"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","sourcesContent":["// Configuración global y variables\r\nlet currentChart = null;\r\n\r\n// Función para obtener datos de la tabla\r\nfunction getChartDataFromTable() {\r\n    try {\r\n        const headers = Array.from(document.querySelectorAll('#tableHeader th'))\r\n            .map(th => th.textContent.trim().toLowerCase());\r\n        \r\n        console.log('Headers encontrados:', headers);\r\n        \r\n        // Buscar índices de columnas necesarias\r\n        const diaIndex = headers.findIndex(h => \r\n            ['dia', 'día', 'day', 'fecha'].includes(h)\r\n        );\r\n        \r\n        const datoFPFIndex = headers.findIndex(h => \r\n            h.includes('fpf') || h.includes('datofpf') || h === 'dato'\r\n        );\r\n        \r\n        if (diaIndex === -1 || datoFPFIndex === -1) {\r\n            throw new Error(`Columnas requeridas no encontradas. Columnas disponibles: ${headers.join(', ')}`);\r\n        }\r\n        \r\n        // Obtener y procesar datos de las filas\r\n        const rows = Array.from(document.querySelectorAll('#tableBody tr'));\r\n        const data = rows.map((row, index) => {\r\n            const cells = Array.from(row.querySelectorAll('td'));\r\n            \r\n            const diaValue = cells[diaIndex].textContent.trim();\r\n            const fpfValue = cells[datoFPFIndex].textContent.trim();\r\n            \r\n            const dia = parseInt(diaValue);\r\n            const datoFPF = parseFloat(fpfValue);\r\n            \r\n            if (isNaN(dia) || isNaN(datoFPF)) {\r\n                console.warn(`Valores inválidos en fila ${index}:`, { dia: diaValue, fpf: fpfValue });\r\n                return null;\r\n            }\r\n            \r\n            return { dia, datoFPF };\r\n        }).filter(item => item !== null);\r\n        \r\n        if (data.length === 0) {\r\n            throw new Error('No se pudieron procesar los datos de la tabla');\r\n        }\r\n        \r\n        // Ordenar datos por día\r\n        data.sort((a, b) => a.dia - b.dia);\r\n        \r\n        return {\r\n            labels: data.map(item => `Día ${item.dia}`),\r\n            datasets: [{\r\n                label: 'Dato FPF',\r\n                data: data.map(item => item.datoFPF),\r\n                borderColor: 'rgb(75, 192, 192)',\r\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                tension: 0.1,\r\n                fill: true,\r\n                pointRadius: 5,\r\n                pointHoverRadius: 7\r\n            }]\r\n        };\r\n    } catch (error) {\r\n        console.error('Error al obtener datos para la gráfica:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Función para crear o actualizar la gráfica\r\nfunction createOrUpdateChart() {\r\n    try {\r\n        const chartContainer = document.getElementById('chartContainer');\r\n        const ctx = document.getElementById('dataChart').getContext('2d');\r\n        \r\n        // Destruir gráfica existente si hay una\r\n        if (currentChart) {\r\n            currentChart.destroy();\r\n        }\r\n        \r\n        const chartData = getChartDataFromTable();\r\n        \r\n        // Crear nueva gráfica\r\n        currentChart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: chartData,\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                plugins: {\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Evolución del Dato FPF por Día',\r\n                        font: { size: 16 }\r\n                    },\r\n                    legend: {\r\n                        display: true,\r\n                        position: 'top'\r\n                    },\r\n                    tooltip: {\r\n                        mode: 'index',\r\n                        intersect: false,\r\n                        callbacks: {\r\n                            label: function(context) {\r\n                                return `FPF: ${context.parsed.y.toFixed(2)}`;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: false,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Dato FPF',\r\n                            font: { size: 14 }\r\n                        }\r\n                    },\r\n                    x: {\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Día',\r\n                            font: { size: 14 }\r\n                        },\r\n                        ticks: {\r\n                            maxRotation: 45,\r\n                            minRotation: 45\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        chartContainer.style.display = 'block';\r\n    } catch (error) {\r\n        console.error('Error al crear la gráfica:', error);\r\n        showError('Error al crear la gráfica: ' + error.message);\r\n    }\r\n}\r\n\r\n// Función para mostrar errores\r\nfunction showError(message) {\r\n    const errorElement = document.getElementById('error');\r\n    errorElement.textContent = message;\r\n    errorElement.style.display = 'block';\r\n    console.error('Error:', message);\r\n}\r\n\r\n// Función para limpiar errores\r\nfunction clearError() {\r\n    const errorElement = document.getElementById('error');\r\n    errorElement.style.display = 'none';\r\n    errorElement.textContent = '';\r\n}\r\n\r\n// Exportar funciones\r\nexport {\r\n    createOrUpdateChart,\r\n    showError,\r\n    clearError\r\n};"],"file":"grafica.dev.js"}