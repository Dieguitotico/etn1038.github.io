{"version":3,"sources":["server.js"],"names":["express","require","MongoClient","ServerApiVersion","app","use","uri","v1","strict","req","res","databasesList","regeneratorRuntime","async","_context","prev","next","awrap","client","connect","db","admin","listDatabases","sent","get","json","databases","t0","status","error","message","stop","collections","_context2","params","dbName","listCollections","toArray","collection","_req$query","day","month","year","filter","selectedDate","documents","previousRecords","_context3","collectionName","query","gestion","parseInt","mes","dia","console","log","find","$lte","$lt","sort","limit","PORT","process","env","listen"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,oBACkBA,QAAQ,WAA1CC,qBAAAA,YAAaC,0BAAAA,iBADfH,KAAOC,QAAU,QAGjBG,IAAMJ,UAEZI,IAJQF,IAAAA,QAKRE,IALqBD,IAAAA,QAAAA,QAMrBC,IAAIC,IAAIL,QAAO,OAAQ,WAEvB,IAAMM,IAAM,+GANNF,OAAMJ,IAAZE,YAAAI,IAAA,CAEAF,UAAY,CACRC,QAAIL,iBAARO,GACIF,QAAIL,EAEFM,mBAAM,KAIRE,IAAAA,IAAAA,iBAFS,SAAAC,EAAAC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAC,OAAAC,WAAA,KAAA,EAAA,OAAAL,EAAAE,KAAA,EAAAJ,mBAAAK,MADbC,OAAAE,KAAAC,QAAAC,iBACa,KAAA,EADbX,EACaG,EAAAS,KAOTC,EAAIC,KAAAd,EAAkBe,WAPbZ,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAa,GAAAb,EAAA,MAAA,GAOaJ,EAAAkB,OAAA,KAAAH,KAAA,CAAAI,MAAAf,EAAAa,GAAAG,UAPb,KAAA,GAAA,IAAA,MAAA,OAAAhB,EAAAiB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAOa3B,IAAAoB,IAAA,2BAAA,SAAAf,EAAAC,GAAA,IAAAU,EAAAY,EAAA,OAAApB,mBAAAC,MAAA,SAAAoB,GAAA,OAAA,OAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,KAAA,EAAA,OAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAAAJ,mBAAAK,MAAAC,OAAAC,WAAA,KAAA,EAAA,OAahBC,EAAKF,OAAOE,GAAGX,EAAIyB,OAAOC,QAbVF,EAAAjB,KAAA,EAAAJ,mBAAAK,MAAAG,EAAAgB,kBAAAC,WAAA,KAAA,EAAAL,EAAAC,EAAAV,KAAAb,EAAAe,KAAAO,GAAAC,EAAAjB,KAAA,GAAA,MAAA,KAAA,GAAAiB,EAAAlB,KAAA,GAAAkB,EAAAN,GAAAM,EAAA,MAAA,GAiBtBvB,EAAIkB,OAAO,KAAKH,KAAK,CAAEI,MAAOI,EAAAN,GAAMG,UAjBd,KAAA,GAAA,IAAA,MAAA,OAAAG,EAAAF,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAAA3B,IAAAoB,IAAA,oCAAA,SAAAf,EAAAC,GAAA,IAAAU,EAAAkB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAlC,mBAAAC,MAAA,SAAAkC,GAAA,OAAA,OAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,KAAA,EAAA,OAAA+B,EAAAhC,KAAA,EAAAgC,EAAA/B,KAAA,EAAAJ,mBAAAK,MAuBhBC,OAAOC,WAvBS,KAAA,EAAA,GAAAC,EAAAF,OAAAE,GAAAX,EAAAyB,OAAAC,QAAAG,EAAAlB,EAAAkB,WAAA7B,EAAAyB,OAAAc,gBAAAT,EAMD9B,EAAAwC,MAArBvC,EANsB6B,EAMtB7B,IAAIkB,EANkBW,EAMlBX,MAAJc,EANsBH,EAMtBG,KAAuBb,EAAK,GAAPe,EAArB,KANsBF,GAAAD,GAAAD,GAAAI,EAAA,CAAAM,QAAAC,SAAAT,GAAAU,IAAAD,SAAAV,GAAAY,IAAAF,SAAAX,IAA1BG,EAAAC,IAUoCF,IAAAC,EAAAO,QAAAC,SAAAT,IAAAD,IAAAE,EAAAS,IAAAD,SAAAV,IAAAD,IAAAG,EAAAU,IAAAF,SAAAX,KAAAc,QAAAC,IAAA,mBAAAZ,GAqC5BC,EA/CkB,OAAAG,EAAA/B,KAAA,GAAAJ,mBAAAK,MAUUqB,EAAAkB,KAAA,CAG1BpC,IAH0B,CAAA,CAAA8B,QAAAN,EAAAM,QA0CxBE,IAAKR,EAAaQ,IA1CMC,IAAA,CAAAI,KAAAb,EAAAS,MAKhC3C,CALgCwC,QAAAN,EAAAM,QAAAE,IAAA,CAAAM,IAAAd,EAAAQ,MAAA,CAAAF,QAAA,CAAAQ,IAAAd,EAAAM,aAOXS,KAArB,CAAAT,SAAA,EAAAE,KAAA,EAAAC,KAAA,IAgDGO,MAAM,IAvDuBvB,WAVVU,EAAA/B,KAAA,GAAA,MAAA,KAAA,GAUU8B,EAVVC,EAAAxB,KAUUsB,EAAAC,EAVVC,EAAA/B,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA+B,EAAA/B,KAAA,GAAAJ,mBAAAK,MAUUqB,EAAAkB,KAAAb,GAAAgB,KAAA,CAAAT,SAAA,EAAAE,KAAA,EAAAC,KAAA,IAApCO,MAAA,IAWQvB,WArBkB,KAAA,GAUUQ,EAVVE,EAAAxB,KAAA,KAAA,GAqBmBb,EAAAe,KAAAoB,GArBnBE,EAAA/B,KAAA,GAAA,MAAA,KAAA,GAAA+B,EAAAhC,KAAA,GAAAgC,EAAApB,GAAAoB,EAAA,MAAA,GAqBmBO,QAAAzB,MAAA,wBAAAkB,EAAApB,IAAAjB,EAAAkB,OAAA,KAAAH,KAAA,CAAAI,MAAAkB,EAAApB,GAAAG,UArBnB,KAAA,GAAA,IAAA,MAAA,OAAAiB,EAAAhB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAmF1B,IAAM8B,KAAOC,QAAQC,IAAIF,MAAQ,IA9DYzD,IAAA4D,OAAAH,KAAA,WAGnCzC,QAAAA,IAAAA,0BAAAA,OAA0Be","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst { MongoClient, ServerApiVersion } = require('mongodb');\r\nconst cors = require('cors');\r\nconst app = express();\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(express.static('public'));\r\n\r\nconst uri = \"mongodb+srv://dticona1038:t1c0m4n09@cluster0.mh56n.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\";\r\nconst client = new MongoClient(uri, {\r\n  serverApi: {\r\n    version: ServerApiVersion.v1,\r\n    strict: true,\r\n    deprecationErrors: true,\r\n  }\r\n});\r\n\r\napp.get('/api/databases', async (req, res) => {\r\n  try {\r\n    await client.connect();\r\n    const databasesList = await client.db().admin().listDatabases();\r\n    res.json(databasesList.databases);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\napp.get('/api/collections/:dbName', async (req, res) => {\r\n  try {\r\n    await client.connect();\r\n    const db = client.db(req.params.dbName);\r\n    const collections = await db.listCollections().toArray();\r\n    res.json(collections);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\napp.get('/api/data/:dbName/:collectionName', async (req, res) => {\r\n  try {\r\n    await client.connect();\r\n    const db = client.db(req.params.dbName);\r\n    const collection = db.collection(req.params.collectionName);\r\n    \r\n    const { day, month, year } = req.query;\r\n    let filter = {};\r\n    let selectedDate = null;\r\n\r\n    if (year && month && day) {\r\n      selectedDate = {\r\n        gestion: parseInt(year),\r\n        mes: parseInt(month),\r\n        dia: parseInt(day)\r\n      };\r\n      filter = selectedDate;\r\n    } else {\r\n      if (year) filter.gestion = parseInt(year);\r\n      if (month) filter.mes = parseInt(month);\r\n      if (day) filter.dia = parseInt(day);\r\n    }\r\n\r\n    console.log('Filtro aplicado:', filter);\r\n\r\n    let documents;\r\n    if (selectedDate) {\r\n      const previousRecords = await collection.find({\r\n        $or: [\r\n          {\r\n            gestion: selectedDate.gestion,\r\n            mes: selectedDate.mes,\r\n            dia: { $lte: selectedDate.dia }\r\n          },\r\n          {\r\n            gestion: selectedDate.gestion,\r\n            mes: { $lt: selectedDate.mes }\r\n          },\r\n          {\r\n            gestion: { $lt: selectedDate.gestion }\r\n          }\r\n        ]\r\n      })\r\n      .sort({ gestion: -1, mes: -1, dia: -1 })\r\n      .limit(10)\r\n      .toArray();\r\n\r\n      documents = previousRecords;\r\n    } else {\r\n      documents = await collection.find(filter)\r\n        .sort({ gestion: -1, mes: -1, dia: -1 })\r\n        .limit(10)\r\n        .toArray();\r\n    }\r\n\r\n    res.json(documents);\r\n  } catch (error) {\r\n    console.error('Error en la consulta:', error);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}`);\r\n});"]}