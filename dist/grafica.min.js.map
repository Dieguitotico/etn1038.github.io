{"version":3,"sources":["grafica.js"],"names":["currentChart","getChartDataFromTable","headers","Array","from","document","querySelectorAll","map","th","textContent","trim","toLowerCase","log","diaIndex","findIndex","h","includes","datoFPFIndex","Error","join","data","row","index","cells","diaValue","datoFPF","dia","parseInt","parseFloat","fpf","fpfValue","length","filter","labels","item","concat","datasets","label","backgroundColor","tension","fill","pointRadius","error","console","createOrUpdateChart","borderColor","getElementById","getContext","pointHoverRadius","destroy","Chart","ctx","type","chartData","responsive","chartContainer","title","display","font","size","mode","intersect","maintainAspectRatio","context","parsed","y","toFixed","scales","beginAtZero","text","callbacks","ticks","maxRotation","minRotation","style","x","message","errorElement","clearError"],"mappings":"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","file":"grafica.min.js","sourcesContent":["// Configuración global y variables\r\nlet currentChart = null;\r\n\r\n// Función para obtener datos de la tabla\r\nfunction getChartDataFromTable() {\r\n    try {\r\n        const headers = Array.from(document.querySelectorAll('#tableHeader th'))\r\n            .map(th => th.textContent.trim().toLowerCase());\r\n        \r\n        console.log('Headers encontrados:', headers);\r\n        \r\n        // Buscar índices de columnas necesarias\r\n        const diaIndex = headers.findIndex(h => \r\n            ['dia', 'día', 'day', 'fecha'].includes(h)\r\n        );\r\n        \r\n        const datoFPFIndex = headers.findIndex(h => \r\n            h.includes('fpf') || h.includes('datofpf') || h === 'dato'\r\n        );\r\n        \r\n        if (diaIndex === -1 || datoFPFIndex === -1) {\r\n            throw new Error(`Columnas requeridas no encontradas. Columnas disponibles: ${headers.join(', ')}`);\r\n        }\r\n        \r\n        // Obtener y procesar datos de las filas\r\n        const rows = Array.from(document.querySelectorAll('#tableBody tr'));\r\n        const data = rows.map((row, index) => {\r\n            const cells = Array.from(row.querySelectorAll('td'));\r\n            \r\n            const diaValue = cells[diaIndex].textContent.trim();\r\n            const fpfValue = cells[datoFPFIndex].textContent.trim();\r\n            \r\n            const dia = parseInt(diaValue);\r\n            const datoFPF = parseFloat(fpfValue);\r\n            \r\n            if (isNaN(dia) || isNaN(datoFPF)) {\r\n                console.warn(`Valores inválidos en fila ${index}:`, { dia: diaValue, fpf: fpfValue });\r\n                return null;\r\n            }\r\n            \r\n            return { dia, datoFPF };\r\n        }).filter(item => item !== null);\r\n        \r\n        if (data.length === 0) {\r\n            throw new Error('No se pudieron procesar los datos de la tabla');\r\n        }\r\n        \r\n        // Ordenar datos por día\r\n        data.sort((a, b) => a.dia - b.dia);\r\n        \r\n        return {\r\n            labels: data.map(item => `Día ${item.dia}`),\r\n            datasets: [{\r\n                label: 'Dato FPF',\r\n                data: data.map(item => item.datoFPF),\r\n                borderColor: 'rgb(75, 192, 192)',\r\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                tension: 0.1,\r\n                fill: true,\r\n                pointRadius: 5,\r\n                pointHoverRadius: 7\r\n            }]\r\n        };\r\n    } catch (error) {\r\n        console.error('Error al obtener datos para la gráfica:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Función para crear o actualizar la gráfica\r\nfunction createOrUpdateChart() {\r\n    try {\r\n        const chartContainer = document.getElementById('chartContainer');\r\n        const ctx = document.getElementById('dataChart').getContext('2d');\r\n        \r\n        // Destruir gráfica existente si hay una\r\n        if (currentChart) {\r\n            currentChart.destroy();\r\n        }\r\n        \r\n        const chartData = getChartDataFromTable();\r\n        \r\n        // Crear nueva gráfica\r\n        currentChart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: chartData,\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                plugins: {\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Evolución del Dato FPF por Día',\r\n                        font: { size: 16 }\r\n                    },\r\n                    legend: {\r\n                        display: true,\r\n                        position: 'top'\r\n                    },\r\n                    tooltip: {\r\n                        mode: 'index',\r\n                        intersect: false,\r\n                        callbacks: {\r\n                            label: function(context) {\r\n                                return `FPF: ${context.parsed.y.toFixed(2)}`;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: false,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Dato FPF',\r\n                            font: { size: 14 }\r\n                        }\r\n                    },\r\n                    x: {\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Día',\r\n                            font: { size: 14 }\r\n                        },\r\n                        ticks: {\r\n                            maxRotation: 45,\r\n                            minRotation: 45\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        chartContainer.style.display = 'block';\r\n    } catch (error) {\r\n        console.error('Error al crear la gráfica:', error);\r\n        showError('Error al crear la gráfica: ' + error.message);\r\n    }\r\n}\r\n\r\n// Función para mostrar errores\r\nfunction showError(message) {\r\n    const errorElement = document.getElementById('error');\r\n    errorElement.textContent = message;\r\n    errorElement.style.display = 'block';\r\n    console.error('Error:', message);\r\n}\r\n\r\n// Función para limpiar errores\r\nfunction clearError() {\r\n    const errorElement = document.getElementById('error');\r\n    errorElement.style.display = 'none';\r\n    errorElement.textContent = '';\r\n}\r\n\r\n// Exportar funciones\r\nexport {\r\n    createOrUpdateChart,\r\n    showError,\r\n    clearError\r\n};"]}