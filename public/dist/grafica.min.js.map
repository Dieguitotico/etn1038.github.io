{"version":3,"sources":["grafica.js"],"names":["currentChart","createOrUpdateChart","data","getDataFromTable","console","log","length","Error","sortedData","sort","a","b","dia","chartContainer","document","getElementById","destroy","ctx","getContext","Chart","labels","map","item","concat","datasets","datoFPF","borderColor","backgroundColor","borderWidth","fill","pointStyle","pointRadius","pointHoverRadius","pointBorderWidth","tension","maintainAspectRatio","pointBackgroundColor","pointBorderColor","size","weight","padding","titleColor","bodyColor","displayColors","callbacks","label","context","parsed","y","toFixed","display","position","x","title","text","font","ticks","maxRotation","minRotation","beginAtZero","callback","value","style","totalPuntos","diasGraficados","valoresFPF","error","showError","message","visibleRows","Array","from","querySelectorAll","th","textContent","trim","toLowerCase","index","cellIndex","diaColumn","headers","find","h","includes","fpfColumn","join","row","rowIndex","cells","Math","max","warn","diaValue","fpfValue","parseInt","replace","parseFloat","filter","errorDiv","setTimeout","clearError"],"mappings":"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","file":"grafica.min.js","sourcesContent":["let currentChart = null;\r\n\r\nexport function createOrUpdateChart() {\r\n    try {\r\n        const data = getDataFromTable();\r\n        console.log('Datos filtrados obtenidos para la gráfica:', data);\r\n        \r\n        if (!data || data.length === 0) {\r\n            throw new Error('No hay datos válidos para graficar');\r\n        }\r\n\r\n        // Ordenar los datos por día\r\n        const sortedData = data.sort((a, b) => a.dia - b.dia);\r\n        \r\n        // Verificar que solo estamos usando los datos filtrados\r\n        console.log('Número de datos a graficar:', sortedData.length);\r\n        \r\n        const chartContainer = document.getElementById('chartContainer');\r\n        \r\n        if (currentChart) {\r\n            currentChart.destroy();\r\n        }\r\n        \r\n        const ctx = document.getElementById('dataChart').getContext('2d');\r\n        \r\n        // Crear el gráfico solo con los datos filtrados\r\n        currentChart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: sortedData.map(item => `Día ${item.dia}`),\r\n                datasets: [{\r\n                    label: 'Dato FPF',\r\n                    data: sortedData.map(item => item.datoFPF),\r\n                    borderColor: 'rgb(53, 162, 235)',\r\n                    backgroundColor: 'rgba(53, 162, 235, 0.2)',\r\n                    borderWidth: 2,\r\n                    tension: 0.3,\r\n                    fill: true,\r\n                    pointStyle: 'circle',\r\n                    pointRadius: 5,\r\n                    pointHoverRadius: 8,\r\n                    pointBackgroundColor: 'rgb(53, 162, 235)',\r\n                    pointBorderColor: 'white',\r\n                    pointBorderWidth: 2\r\n                }]\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                plugins: {\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Evolución del Dato FPF',\r\n                        font: {\r\n                            size: 16,\r\n                            weight: 'bold'\r\n                        },\r\n                        padding: 20\r\n                    },\r\n                    tooltip: {\r\n                        backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                        titleColor: '#333',\r\n                        bodyColor: '#666',\r\n                        borderColor: 'rgba(53, 162, 235, 0.3)',\r\n                        borderWidth: 1,\r\n                        padding: 10,\r\n                        displayColors: false,\r\n                        callbacks: {\r\n                            label: function(context) {\r\n                                return `FPF: ${context.parsed.y.toFixed(2)}`;\r\n                            }\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        display: true,\r\n                        position: 'top'\r\n                    }\r\n                },\r\n                scales: {\r\n                    x: {\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Día',\r\n                            font: {\r\n                                size: 14,\r\n                                weight: 'bold'\r\n                            }\r\n                        },\r\n                        ticks: {\r\n                            maxRotation: 45,\r\n                            minRotation: 45\r\n                        }\r\n                    },\r\n                    y: {\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Dato FPF',\r\n                            font: {\r\n                                size: 14,\r\n                                weight: 'bold'\r\n                            }\r\n                        },\r\n                        beginAtZero: true,\r\n                        ticks: {\r\n                            callback: function(value) {\r\n                                return value.toFixed(2);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        chartContainer.style.display = 'block';\r\n        \r\n        // Mostrar información sobre los datos graficados\r\n        console.log('Datos graficados:', {\r\n            totalPuntos: sortedData.length,\r\n            diasGraficados: sortedData.map(item => item.dia),\r\n            valoresFPF: sortedData.map(item => item.datoFPF)\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('Error al crear el gráfico:', error);\r\n        showError('Error al crear el gráfico: ' + error.message);\r\n    }\r\n}\r\n\r\nfunction getDataFromTable() {\r\n    // Obtener SOLO las filas visibles en la tabla (las que no están ocultas)\r\n    const visibleRows = Array.from(document.querySelectorAll('#tableBody tr:not([style*=\"display: none\"]):not(.hidden)'));\r\n    \r\n    // Verificar que estamos obteniendo solo las filas filtradas\r\n    console.log('Número de filas visibles encontradas:', visibleRows.length);\r\n    \r\n    // Obtener los encabezados y sus índices\r\n    const headers = Array.from(document.querySelectorAll('#tableHeader th'))\r\n        .map(th => ({\r\n            text: th.textContent.trim().toLowerCase(),\r\n            index: th.cellIndex\r\n        }));\r\n    \r\n    // Encontrar las columnas necesarias\r\n    const diaColumn = headers.find(h => \r\n        h.text.includes('dia') || \r\n        h.text.includes('día') || \r\n        h.text === 'day'\r\n    );\r\n\r\n    const fpfColumn = headers.find(h => \r\n        h.text.includes('datofpf') || \r\n        h.text.includes('dato fpf') || \r\n        h.text.includes('fpf')\r\n    );\r\n\r\n    if (!diaColumn || !fpfColumn) {\r\n        throw new Error(`Columnas no encontradas. Encabezados disponibles: ${headers.map(h => h.text).join(', ')}`);\r\n    }\r\n\r\n    // Procesar solo las filas visibles\r\n    const data = visibleRows.map((row, rowIndex) => {\r\n        const cells = Array.from(row.cells);\r\n        \r\n        if (cells.length <= Math.max(diaColumn.index, fpfColumn.index)) {\r\n            console.warn(`Fila ${rowIndex} no tiene suficientes columnas`);\r\n            return null;\r\n        }\r\n\r\n        const diaValue = cells[diaColumn.index].textContent.trim();\r\n        const fpfValue = cells[fpfColumn.index].textContent.trim();\r\n\r\n        // Convertir a números\r\n        const dia = parseInt(diaValue.replace(/[^\\d.-]/g, ''));\r\n        const datoFPF = parseFloat(fpfValue.replace(/[^\\d.-]/g, ''));\r\n\r\n        if (!isNaN(dia) && !isNaN(datoFPF)) {\r\n            return { dia, datoFPF };\r\n        } else {\r\n            console.warn(`Valores inválidos en fila ${rowIndex}:`, { dia: diaValue, datoFPF: fpfValue });\r\n            return null;\r\n        }\r\n    }).filter(item => item !== null);\r\n\r\n    if (data.length === 0) {\r\n        throw new Error('No se encontraron datos válidos para graficar en las filas visibles');\r\n    }\r\n\r\n    console.log('Datos procesados de filas visibles:', data);\r\n    return data;\r\n}\r\n\r\nexport function showError(message) {\r\n    const errorDiv = document.getElementById('error');\r\n    if (errorDiv) {\r\n        errorDiv.textContent = message;\r\n        errorDiv.style.display = 'block';\r\n        setTimeout(() => {\r\n            errorDiv.style.display = 'none';\r\n        }, 5000);\r\n    }\r\n    console.error(message);\r\n}\r\n\r\nexport function clearError() {\r\n    const errorDiv = document.getElementById('error');\r\n    if (errorDiv) {\r\n        errorDiv.style.display = 'none';\r\n        errorDiv.textContent = '';\r\n    }\r\n}"]}