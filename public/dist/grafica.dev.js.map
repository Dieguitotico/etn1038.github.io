{"version":3,"sources":["grafica.js"],"names":["currentChart","createOrUpdateChart","data","getDataFromTable","console","log","length","Error","sortedData","sort","a","b","dia","chartContainer","document","getElementById","destroy","ctx","getContext","Chart","type","labels","map","item","datasets","label","datoFPF","borderColor","backgroundColor","borderWidth","tension","fill","pointStyle","pointRadius","pointHoverRadius","pointBackgroundColor","pointBorderColor","pointBorderWidth","options","responsive","maintainAspectRatio","plugins","title","display","text","font","size","weight","padding","tooltip","titleColor","bodyColor","displayColors","callbacks","context","parsed","y","toFixed","legend","position","scales","x","ticks","maxRotation","minRotation","beginAtZero","callback","value","style","totalPuntos","diasGraficados","valoresFPF","error","showError","message","visibleRows","Array","from","querySelectorAll","headers","th","textContent","trim","toLowerCase","index","cellIndex","diaColumn","find","h","includes","fpfColumn","join","row","rowIndex","cells","Math","max","warn","diaValue","fpfValue","parseInt","replace","parseFloat","isNaN","filter","errorDiv","setTimeout","clearError"],"mappings":"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","sourcesContent":["let currentChart = null;\r\n\r\nexport function createOrUpdateChart() {\r\n    try {\r\n        const data = getDataFromTable();\r\n        console.log('Datos filtrados obtenidos para la gráfica:', data);\r\n        \r\n        if (!data || data.length === 0) {\r\n            throw new Error('No hay datos válidos para graficar');\r\n        }\r\n\r\n        // Ordenar los datos por día\r\n        const sortedData = data.sort((a, b) => a.dia - b.dia);\r\n        \r\n        // Verificar que solo estamos usando los datos filtrados\r\n        console.log('Número de datos a graficar:', sortedData.length);\r\n        \r\n        const chartContainer = document.getElementById('chartContainer');\r\n        \r\n        if (currentChart) {\r\n            currentChart.destroy();\r\n        }\r\n        \r\n        const ctx = document.getElementById('dataChart').getContext('2d');\r\n        \r\n        // Crear el gráfico solo con los datos filtrados\r\n        currentChart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: sortedData.map(item => `Día ${item.dia}`),\r\n                datasets: [{\r\n                    label: 'Dato FPF',\r\n                    data: sortedData.map(item => item.datoFPF),\r\n                    borderColor: 'rgb(53, 162, 235)',\r\n                    backgroundColor: 'rgba(53, 162, 235, 0.2)',\r\n                    borderWidth: 2,\r\n                    tension: 0.3,\r\n                    fill: true,\r\n                    pointStyle: 'circle',\r\n                    pointRadius: 5,\r\n                    pointHoverRadius: 8,\r\n                    pointBackgroundColor: 'rgb(53, 162, 235)',\r\n                    pointBorderColor: 'white',\r\n                    pointBorderWidth: 2\r\n                }]\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                plugins: {\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Evolución del Dato FPF',\r\n                        font: {\r\n                            size: 16,\r\n                            weight: 'bold'\r\n                        },\r\n                        padding: 20\r\n                    },\r\n                    tooltip: {\r\n                        backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                        titleColor: '#333',\r\n                        bodyColor: '#666',\r\n                        borderColor: 'rgba(53, 162, 235, 0.3)',\r\n                        borderWidth: 1,\r\n                        padding: 10,\r\n                        displayColors: false,\r\n                        callbacks: {\r\n                            label: function(context) {\r\n                                return `FPF: ${context.parsed.y.toFixed(2)}`;\r\n                            }\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        display: true,\r\n                        position: 'top'\r\n                    }\r\n                },\r\n                scales: {\r\n                    x: {\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Día',\r\n                            font: {\r\n                                size: 14,\r\n                                weight: 'bold'\r\n                            }\r\n                        },\r\n                        ticks: {\r\n                            maxRotation: 45,\r\n                            minRotation: 45\r\n                        }\r\n                    },\r\n                    y: {\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Dato FPF',\r\n                            font: {\r\n                                size: 14,\r\n                                weight: 'bold'\r\n                            }\r\n                        },\r\n                        beginAtZero: true,\r\n                        ticks: {\r\n                            callback: function(value) {\r\n                                return value.toFixed(2);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        chartContainer.style.display = 'block';\r\n        \r\n        // Mostrar información sobre los datos graficados\r\n        console.log('Datos graficados:', {\r\n            totalPuntos: sortedData.length,\r\n            diasGraficados: sortedData.map(item => item.dia),\r\n            valoresFPF: sortedData.map(item => item.datoFPF)\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('Error al crear el gráfico:', error);\r\n        showError('Error al crear el gráfico: ' + error.message);\r\n    }\r\n}\r\n\r\nfunction getDataFromTable() {\r\n    // Obtener SOLO las filas visibles en la tabla (las que no están ocultas)\r\n    const visibleRows = Array.from(document.querySelectorAll('#tableBody tr:not([style*=\"display: none\"]):not(.hidden)'));\r\n    \r\n    // Verificar que estamos obteniendo solo las filas filtradas\r\n    console.log('Número de filas visibles encontradas:', visibleRows.length);\r\n    \r\n    // Obtener los encabezados y sus índices\r\n    const headers = Array.from(document.querySelectorAll('#tableHeader th'))\r\n        .map(th => ({\r\n            text: th.textContent.trim().toLowerCase(),\r\n            index: th.cellIndex\r\n        }));\r\n    \r\n    // Encontrar las columnas necesarias\r\n    const diaColumn = headers.find(h => \r\n        h.text.includes('dia') || \r\n        h.text.includes('día') || \r\n        h.text === 'day'\r\n    );\r\n\r\n    const fpfColumn = headers.find(h => \r\n        h.text.includes('datofpf') || \r\n        h.text.includes('dato fpf') || \r\n        h.text.includes('fpf')\r\n    );\r\n\r\n    if (!diaColumn || !fpfColumn) {\r\n        throw new Error(`Columnas no encontradas. Encabezados disponibles: ${headers.map(h => h.text).join(', ')}`);\r\n    }\r\n\r\n    // Procesar solo las filas visibles\r\n    const data = visibleRows.map((row, rowIndex) => {\r\n        const cells = Array.from(row.cells);\r\n        \r\n        if (cells.length <= Math.max(diaColumn.index, fpfColumn.index)) {\r\n            console.warn(`Fila ${rowIndex} no tiene suficientes columnas`);\r\n            return null;\r\n        }\r\n\r\n        const diaValue = cells[diaColumn.index].textContent.trim();\r\n        const fpfValue = cells[fpfColumn.index].textContent.trim();\r\n\r\n        // Convertir a números\r\n        const dia = parseInt(diaValue.replace(/[^\\d.-]/g, ''));\r\n        const datoFPF = parseFloat(fpfValue.replace(/[^\\d.-]/g, ''));\r\n\r\n        if (!isNaN(dia) && !isNaN(datoFPF)) {\r\n            return { dia, datoFPF };\r\n        } else {\r\n            console.warn(`Valores inválidos en fila ${rowIndex}:`, { dia: diaValue, datoFPF: fpfValue });\r\n            return null;\r\n        }\r\n    }).filter(item => item !== null);\r\n\r\n    if (data.length === 0) {\r\n        throw new Error('No se encontraron datos válidos para graficar en las filas visibles');\r\n    }\r\n\r\n    console.log('Datos procesados de filas visibles:', data);\r\n    return data;\r\n}\r\n\r\nexport function showError(message) {\r\n    const errorDiv = document.getElementById('error');\r\n    if (errorDiv) {\r\n        errorDiv.textContent = message;\r\n        errorDiv.style.display = 'block';\r\n        setTimeout(() => {\r\n            errorDiv.style.display = 'none';\r\n        }, 5000);\r\n    }\r\n    console.error(message);\r\n}\r\n\r\nexport function clearError() {\r\n    const errorDiv = document.getElementById('error');\r\n    if (errorDiv) {\r\n        errorDiv.style.display = 'none';\r\n        errorDiv.textContent = '';\r\n    }\r\n}"],"file":"grafica.dev.js"}